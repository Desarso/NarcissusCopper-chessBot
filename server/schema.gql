
type Notification {
  gameId: String!
  requesterID: String!
  requesterColor: String!
  receiverID: String!
}


type User {
  id: ID!
  username: String!
  last_seen: String!
  cat_url: String!
  notifications: [Notification!]!
}



type Move {
  from: String!
  to: String!
  endFen: String!
}

type Game {
  id: ID!
  receiverID: String!
  requesterID: String!
  requesterColor: String!
  users: [User!]!
  moves: [Move!]!
  fen: String!
  turn: String!
  started: Boolean!
}

#need to add a subscription for game
type Query {
  getGames: [Game!]!
  getGame(id: ID!): Game!
  getUsers: [User!]!
}

type Mutation {
  createGame(fen: String!, gameId: String!, receiverID: String!, requesterID: String!, requesterColor: String! ): Game!
  addUser(id: ID!, username: String!, cat_url: String!): User!
  deleteUser(id: ID!): User!
  changeFen(id: ID!, fen: String!): Game!
  changeTurn(id: ID!, turn: String!): Game!
  updateLastSeen(id: ID!): User!
  #this notif builds the ID with the received data
  sendNotification(gameId: String!, requesterID: String!, requesterColor: String!, receiverID: String!): User!
  startGame(gameId: String!): Game!
  move(from: String!, to: String!, endFen: String!, gameId: String!): Game!
}

type Subscription {
  game(id: ID!): Game!
  users: [User!]!
  notifications: Notification!
}
