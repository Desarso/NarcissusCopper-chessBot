type chessRequest {
    gameId: String!
    requesterId: String!
    requesterColor: String!
    receiverId: String!
}


type chessUser{
    id: String!
    username: String!
    last_seen : String!
    cat_url : String!
    chessRequests : [chessRequest]
}

type chessMove {
    from: String!
    to: String!
    promotion: String
    endFen: String!
}

type chessGame {
    id: ID!
    receiverId: String!
    receiverColor: String!
    requesterId: String!
    users: [chessUser!]!
    moves: [chessMove!]!
    fen: String!
    turn: String!
    started: Boolean!
}

type Query {
    getChessGames: [chessGame!]!
    getChessGame(id: ID!): chessGame!
    getUsers: [chessUser!]!
}


#I am using both the words create and add, I should use a single one
#add, delete, mutate/update
#I am gonna go with add, delete, mutate

type Mutation{


#chessGame mutations
  addChessGame(fen: String!, gameId: String!, receiverID: String!, requesterID: String!, requesterColor: String! ): chessGame!
  deleteChessGame(id: ID!): chessGame!
  mutateChessGame(id: ID!, receiverId: String!, receiverColor: String!, requesterId: String!): chessGame!
  moveChessPiece(from: String!, to: String!, endFen: String!, gameId: String!, promotion: String): chessGame!
  changeFen(id: ID!, fen: String!): chessGame!
  changeChessTurn(id: ID!, turn: String!): chessGame!
  startChessGame(gameId: String!): chessGame!




  addChessUser(id: ID!, username: String!, cat_url: String!): chessUser!
  deleteChessUser(id: ID!): chessUser!
  mutateChessUser(id: ID!, username: String!, cat_url: String!): chessUser!
  updateLastSeenChess(id: ID!): chessUser!


 



  #this notif builds the ID with the received data
  #this 
  sendChessRequest(gameId: String!, requesterID: String!, requesterColor: String!, receiverID: String!): chessUser!



}



type Subscription {
  chessGamesSub(id: ID!): chessGame!
  chessUsersSub: [chessUser!]!
  chessRequestsSub: chessRequest!
}